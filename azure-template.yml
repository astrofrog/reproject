parameters:
  targets: []
  external_feed: 'pypi_test'

jobs:
- ${{ each target in parameters.targets }}:

  - ${{ if or(eq(target, 'wheels_macosx'), eq(target, 'wheels_linux'), eq(target, 'wheels_windows')) }}:

    - job: ${{ target }}
      pool:
        ${{ if eq(target, 'wheels_macosx') }}:
          vmImage: macOS 10.13
        ${{ if eq(target, 'wheels_linux') }}:
          vmImage: Ubuntu 16.04
        ${{ if eq(target, 'wheels_windows') }}:
          vmImage: vs2017-win2016

      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.7'
        - bash: python -m pip install --upgrade pip
          displayName: Upgrading pip
        # - bash: python -m pip install cibuildwheel
        - bash: python -m pip install git+https://github.com/astrofrog/cibuildwheel@virtualenv
          displayName: Installing cibuildwheel
        - bash: cibuildwheel --output-dir wheelhouse .
          displayName: Running cibuildwheel
        - task: PublishPipelineArtifact@0
          inputs:
            targetPath: 'wheelhouse'
            artifactName: ${{ target }}

  - ${{ if eq(target, 'sdist') }}:

    - job: sdist
      pool:
        vmImage: 'Ubuntu-16.04'
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
      - script: 'python -m pip install pep517 --upgrade'
        displayName: "Installing PEP517 build package"
      - script: 'python -m pep517.build --source --out-dir wheelhouse .'
        displayName: "Building source distribution"
      - script: 'python -m pip install `find wheelhouse -name "*.tar.gz"`[test]'
        displayName: "Installing source distribution"
      - script: $(CIBW_TEST_COMMAND)
        workingDirectory: /tmp
        displayName: "Running tests"
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: 'wheelhouse'
          artifactName: 'sdist'

- job: publish
  dependsOn: ${{ parameters.targets }}
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
  - checkout: none
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - script: 'python -m pip install twine  --upgrade'
    displayName: "Installing twine"
  - task: DownloadPipelineArtifact@1
  - task: TwineAuthenticate@0
    inputs:
      externalFeeds: ${{ parameters.external_feed }}
  - script: 'python -m twine upload -r pypi_test --config-file $(PYPIRC_PATH) "$(System.ArtifactsDirectory)/*/*"'
    displayName: "Uploading packages to test.pypi.org"